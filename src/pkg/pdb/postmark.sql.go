// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: postmark.sql

package pdb

import (
	"context"
)

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM postmark_inbound_rules WHERE id = ?
`

// DeleteSession
//
//	DELETE FROM postmark_inbound_rules WHERE id = ?
func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, id)
	return err
}

const resetSessions = `-- name: ResetSessions :exec
DELETE FROM postmark_inbound_rules
`

// ResetSessions
//
//	DELETE FROM postmark_inbound_rules
func (q *Queries) ResetSessions(ctx context.Context) error {
	_, err := q.exec(ctx, q.resetSessionsStmt, resetSessions)
	return err
}

const setInboundEmail = `-- name: SetInboundEmail :exec
INSERT INTO postmark_inbound_emails (id, received, email, from_name, subject, message, attachment)
VALUES (?, ?, ?, ?, ?, ?, ?)
ON CONFLICT (id) DO UPDATE
SET received = excluded.received,
    email = excluded.email,
    from_name = excluded.from_name,
    subject = excluded.subject,
    message = excluded.message,
    attachment = excluded.attachment
`

type SetInboundEmailParams struct {
	ID         string `json:"id"`
	Received   int64  `json:"received"`
	Email      string `json:"email"`
	FromName   string `json:"from_name"`
	Subject    string `json:"subject"`
	Message    string `json:"message"`
	Attachment []byte `json:"attachment"`
}

// SetInboundEmail
//
//	INSERT INTO postmark_inbound_emails (id, received, email, from_name, subject, message, attachment)
//	VALUES (?, ?, ?, ?, ?, ?, ?)
//	ON CONFLICT (id) DO UPDATE
//	SET received = excluded.received,
//	    email = excluded.email,
//	    from_name = excluded.from_name,
//	    subject = excluded.subject,
//	    message = excluded.message,
//	    attachment = excluded.attachment
func (q *Queries) SetInboundEmail(ctx context.Context, arg SetInboundEmailParams) error {
	_, err := q.exec(ctx, q.setInboundEmailStmt, setInboundEmail,
		arg.ID,
		arg.Received,
		arg.Email,
		arg.FromName,
		arg.Subject,
		arg.Message,
		arg.Attachment,
	)
	return err
}
