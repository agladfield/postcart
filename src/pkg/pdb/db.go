// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package pdb

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createRecipientStmt, err = db.PrepareContext(ctx, createRecipient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipient: %w", err)
	}
	if q.createSenderStmt, err = db.PrepareContext(ctx, createSender); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSender: %w", err)
	}
	if q.deleteSessionStmt, err = db.PrepareContext(ctx, deleteSession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSession: %w", err)
	}
	if q.getQueuedRequestStmt, err = db.PrepareContext(ctx, getQueuedRequest); err != nil {
		return nil, fmt.Errorf("error preparing query GetQueuedRequest: %w", err)
	}
	if q.getQueuedRequestsStmt, err = db.PrepareContext(ctx, getQueuedRequests); err != nil {
		return nil, fmt.Errorf("error preparing query GetQueuedRequests: %w", err)
	}
	if q.getRecipientByEmailStmt, err = db.PrepareContext(ctx, getRecipientByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipientByEmail: %w", err)
	}
	if q.getRecipientByIDStmt, err = db.PrepareContext(ctx, getRecipientByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipientByID: %w", err)
	}
	if q.getSenderByEmailStmt, err = db.PrepareContext(ctx, getSenderByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetSenderByEmail: %w", err)
	}
	if q.getSenderByIDStmt, err = db.PrepareContext(ctx, getSenderByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSenderByID: %w", err)
	}
	if q.incrementRecipientByEmailStmt, err = db.PrepareContext(ctx, incrementRecipientByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementRecipientByEmail: %w", err)
	}
	if q.incrementRecipientByIDStmt, err = db.PrepareContext(ctx, incrementRecipientByID); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementRecipientByID: %w", err)
	}
	if q.resetSessionsStmt, err = db.PrepareContext(ctx, resetSessions); err != nil {
		return nil, fmt.Errorf("error preparing query ResetSessions: %w", err)
	}
	if q.setInboundEmailStmt, err = db.PrepareContext(ctx, setInboundEmail); err != nil {
		return nil, fmt.Errorf("error preparing query SetInboundEmail: %w", err)
	}
	if q.setQueuedRequestStmt, err = db.PrepareContext(ctx, setQueuedRequest); err != nil {
		return nil, fmt.Errorf("error preparing query SetQueuedRequest: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createRecipientStmt != nil {
		if cerr := q.createRecipientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipientStmt: %w", cerr)
		}
	}
	if q.createSenderStmt != nil {
		if cerr := q.createSenderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSenderStmt: %w", cerr)
		}
	}
	if q.deleteSessionStmt != nil {
		if cerr := q.deleteSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionStmt: %w", cerr)
		}
	}
	if q.getQueuedRequestStmt != nil {
		if cerr := q.getQueuedRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQueuedRequestStmt: %w", cerr)
		}
	}
	if q.getQueuedRequestsStmt != nil {
		if cerr := q.getQueuedRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQueuedRequestsStmt: %w", cerr)
		}
	}
	if q.getRecipientByEmailStmt != nil {
		if cerr := q.getRecipientByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipientByEmailStmt: %w", cerr)
		}
	}
	if q.getRecipientByIDStmt != nil {
		if cerr := q.getRecipientByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipientByIDStmt: %w", cerr)
		}
	}
	if q.getSenderByEmailStmt != nil {
		if cerr := q.getSenderByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSenderByEmailStmt: %w", cerr)
		}
	}
	if q.getSenderByIDStmt != nil {
		if cerr := q.getSenderByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSenderByIDStmt: %w", cerr)
		}
	}
	if q.incrementRecipientByEmailStmt != nil {
		if cerr := q.incrementRecipientByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementRecipientByEmailStmt: %w", cerr)
		}
	}
	if q.incrementRecipientByIDStmt != nil {
		if cerr := q.incrementRecipientByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementRecipientByIDStmt: %w", cerr)
		}
	}
	if q.resetSessionsStmt != nil {
		if cerr := q.resetSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetSessionsStmt: %w", cerr)
		}
	}
	if q.setInboundEmailStmt != nil {
		if cerr := q.setInboundEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setInboundEmailStmt: %w", cerr)
		}
	}
	if q.setQueuedRequestStmt != nil {
		if cerr := q.setQueuedRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setQueuedRequestStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createRecipientStmt           *sql.Stmt
	createSenderStmt              *sql.Stmt
	deleteSessionStmt             *sql.Stmt
	getQueuedRequestStmt          *sql.Stmt
	getQueuedRequestsStmt         *sql.Stmt
	getRecipientByEmailStmt       *sql.Stmt
	getRecipientByIDStmt          *sql.Stmt
	getSenderByEmailStmt          *sql.Stmt
	getSenderByIDStmt             *sql.Stmt
	incrementRecipientByEmailStmt *sql.Stmt
	incrementRecipientByIDStmt    *sql.Stmt
	resetSessionsStmt             *sql.Stmt
	setInboundEmailStmt           *sql.Stmt
	setQueuedRequestStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createRecipientStmt:           q.createRecipientStmt,
		createSenderStmt:              q.createSenderStmt,
		deleteSessionStmt:             q.deleteSessionStmt,
		getQueuedRequestStmt:          q.getQueuedRequestStmt,
		getQueuedRequestsStmt:         q.getQueuedRequestsStmt,
		getRecipientByEmailStmt:       q.getRecipientByEmailStmt,
		getRecipientByIDStmt:          q.getRecipientByIDStmt,
		getSenderByEmailStmt:          q.getSenderByEmailStmt,
		getSenderByIDStmt:             q.getSenderByIDStmt,
		incrementRecipientByEmailStmt: q.incrementRecipientByEmailStmt,
		incrementRecipientByIDStmt:    q.incrementRecipientByIDStmt,
		resetSessionsStmt:             q.resetSessionsStmt,
		setInboundEmailStmt:           q.setInboundEmailStmt,
		setQueuedRequestStmt:          q.setQueuedRequestStmt,
	}
}
