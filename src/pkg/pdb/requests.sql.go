// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: requests.sql

package pdb

import (
	"context"
)

const getQueuedRequest = `-- name: GetQueuedRequest :one
SELECT id, user, to_email, to_name, from_email, from_name, artwork_enum, style_enum, border_enum, font_enum, shape_enum, country, subject, message, attachment FROM queued_requests WHERE id = 1
`

// GetQueuedRequest
//
//	SELECT id, user, to_email, to_name, from_email, from_name, artwork_enum, style_enum, border_enum, font_enum, shape_enum, country, subject, message, attachment FROM queued_requests WHERE id = 1
func (q *Queries) GetQueuedRequest(ctx context.Context) (*QueuedRequest, error) {
	row := q.queryRow(ctx, q.getQueuedRequestStmt, getQueuedRequest)
	var i QueuedRequest
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.ToEmail,
		&i.ToName,
		&i.FromEmail,
		&i.FromName,
		&i.ArtworkEnum,
		&i.StyleEnum,
		&i.BorderEnum,
		&i.FontEnum,
		&i.ShapeEnum,
		&i.Country,
		&i.Subject,
		&i.Message,
		&i.Attachment,
	)
	return &i, err
}

const getQueuedRequests = `-- name: GetQueuedRequests :many
SELECT id, user, to_email, to_name, from_email, from_name, artwork_enum, style_enum, border_enum, font_enum, shape_enum, country, subject, message, attachment FROM queued_requests
`

// GetQueuedRequests
//
//	SELECT id, user, to_email, to_name, from_email, from_name, artwork_enum, style_enum, border_enum, font_enum, shape_enum, country, subject, message, attachment FROM queued_requests
func (q *Queries) GetQueuedRequests(ctx context.Context) ([]*QueuedRequest, error) {
	rows, err := q.query(ctx, q.getQueuedRequestsStmt, getQueuedRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*QueuedRequest
	for rows.Next() {
		var i QueuedRequest
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.ToEmail,
			&i.ToName,
			&i.FromEmail,
			&i.FromName,
			&i.ArtworkEnum,
			&i.StyleEnum,
			&i.BorderEnum,
			&i.FontEnum,
			&i.ShapeEnum,
			&i.Country,
			&i.Subject,
			&i.Message,
			&i.Attachment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setQueuedRequest = `-- name: SetQueuedRequest :exec
INSERT INTO queued_requests (id, user, to_email, to_name, from_email, from_name, artwork_enum, style_enum, border_enum, font_enum, shape_enum, country, subject, message, attachment)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT (id) DO UPDATE
SET user = excluded.user,
    to_email = excluded.to_email,
    to_name = excluded.to_name,
    from_email = excluded.from_email,
    from_name = excluded.from_name,
    artwork_enum = excluded.artwork_enum,
    style_enum = excluded.style_enum,
    border_enum = excluded.border_enum,
    font_enum = excluded.font_enum,
    shape_enum = excluded.shape_enum,
    country = excluded.country,
    subject = excluded.subject,
    message = excluded.message,
    attachment = excluded.attachment
`

type SetQueuedRequestParams struct {
	ID          string `json:"id"`
	User        string `json:"user"`
	ToEmail     string `json:"to_email"`
	ToName      string `json:"to_name"`
	FromEmail   string `json:"from_email"`
	FromName    string `json:"from_name"`
	ArtworkEnum int64  `json:"artwork_enum"`
	StyleEnum   int64  `json:"style_enum"`
	BorderEnum  int64  `json:"border_enum"`
	FontEnum    int64  `json:"font_enum"`
	ShapeEnum   int64  `json:"shape_enum"`
	Country     string `json:"country"`
	Subject     string `json:"subject"`
	Message     string `json:"message"`
	Attachment  []byte `json:"attachment"`
}

// SetQueuedRequest
//
//	INSERT INTO queued_requests (id, user, to_email, to_name, from_email, from_name, artwork_enum, style_enum, border_enum, font_enum, shape_enum, country, subject, message, attachment)
//	VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
//	ON CONFLICT (id) DO UPDATE
//	SET user = excluded.user,
//	    to_email = excluded.to_email,
//	    to_name = excluded.to_name,
//	    from_email = excluded.from_email,
//	    from_name = excluded.from_name,
//	    artwork_enum = excluded.artwork_enum,
//	    style_enum = excluded.style_enum,
//	    border_enum = excluded.border_enum,
//	    font_enum = excluded.font_enum,
//	    shape_enum = excluded.shape_enum,
//	    country = excluded.country,
//	    subject = excluded.subject,
//	    message = excluded.message,
//	    attachment = excluded.attachment
func (q *Queries) SetQueuedRequest(ctx context.Context, arg SetQueuedRequestParams) error {
	_, err := q.exec(ctx, q.setQueuedRequestStmt, setQueuedRequest,
		arg.ID,
		arg.User,
		arg.ToEmail,
		arg.ToName,
		arg.FromEmail,
		arg.FromName,
		arg.ArtworkEnum,
		arg.StyleEnum,
		arg.BorderEnum,
		arg.FontEnum,
		arg.ShapeEnum,
		arg.Country,
		arg.Subject,
		arg.Message,
		arg.Attachment,
	)
	return err
}
