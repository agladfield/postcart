// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: essential.sql

package pdb

import (
	"context"
)

const createRecipient = `-- name: CreateRecipient :exec
INSERT INTO recipients (id, created, email, received)
VALUES (?, ?, ?, ?)
`

type CreateRecipientParams struct {
	ID       string `json:"id"`
	Created  int64  `json:"created"`
	Email    string `json:"email"`
	Received int64  `json:"received"`
}

// CreateRecipient
//
//	INSERT INTO recipients (id, created, email, received)
//	VALUES (?, ?, ?, ?)
func (q *Queries) CreateRecipient(ctx context.Context, arg CreateRecipientParams) error {
	_, err := q.exec(ctx, q.createRecipientStmt, createRecipient,
		arg.ID,
		arg.Created,
		arg.Email,
		arg.Received,
	)
	return err
}

const createSender = `-- name: CreateSender :exec

INSERT INTO senders (id, created, last_sent, email, sent, fails, delivered, blocked)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateSenderParams struct {
	ID        string `json:"id"`
	Created   int64  `json:"created"`
	LastSent  int64  `json:"last_sent"`
	Email     string `json:"email"`
	Sent      int64  `json:"sent"`
	Fails     int64  `json:"fails"`
	Delivered int64  `json:"delivered"`
	Blocked   int64  `json:"blocked"`
}

// -- name: UpdateSettings :exec
// INSERT INTO user_config (id, updated, map_type, units_type, notifications_enabled, dark_mode, default_radius)
// VALUES (?, ?, ?, ?, ?, ?, ?)
// ON CONFLICT (id) DO UPDATE
// SET updated = excluded.updated,
//
//	   map_type = excluded.map_type,
//	   units_type = excluded.units_type,
//	   notifications_enabled = excluded.notifications_enabled,
//	   dark_mode = excluded.dark_mode,
//	   default_radius = excluded.default_radius;
//
//
//	INSERT INTO senders (id, created, last_sent, email, sent, fails, delivered, blocked)
//	VALUES (?, ?, ?, ?, ?, ?, ?, ?)
func (q *Queries) CreateSender(ctx context.Context, arg CreateSenderParams) error {
	_, err := q.exec(ctx, q.createSenderStmt, createSender,
		arg.ID,
		arg.Created,
		arg.LastSent,
		arg.Email,
		arg.Sent,
		arg.Fails,
		arg.Delivered,
		arg.Blocked,
	)
	return err
}

const getRecipientByEmail = `-- name: GetRecipientByEmail :one
SELECT id, created, email, received FROM recipients WHERE email = ?
`

// GetRecipientByEmail
//
//	SELECT id, created, email, received FROM recipients WHERE email = ?
func (q *Queries) GetRecipientByEmail(ctx context.Context, email string) (*Recipient, error) {
	row := q.queryRow(ctx, q.getRecipientByEmailStmt, getRecipientByEmail, email)
	var i Recipient
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Email,
		&i.Received,
	)
	return &i, err
}

const getRecipientByID = `-- name: GetRecipientByID :one
SELECT id, created, email, received FROM recipients WHERE id = ?
`

// GetRecipientByID
//
//	SELECT id, created, email, received FROM recipients WHERE id = ?
func (q *Queries) GetRecipientByID(ctx context.Context, id string) (*Recipient, error) {
	row := q.queryRow(ctx, q.getRecipientByIDStmt, getRecipientByID, id)
	var i Recipient
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Email,
		&i.Received,
	)
	return &i, err
}

const getSenderByEmail = `-- name: GetSenderByEmail :one
SELECT id, created, last_sent, email, sent, fails, delivered, blocked FROM senders WHERE email = ?
`

// GetSenderByEmail
//
//	SELECT id, created, last_sent, email, sent, fails, delivered, blocked FROM senders WHERE email = ?
func (q *Queries) GetSenderByEmail(ctx context.Context, email string) (*Sender, error) {
	row := q.queryRow(ctx, q.getSenderByEmailStmt, getSenderByEmail, email)
	var i Sender
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.LastSent,
		&i.Email,
		&i.Sent,
		&i.Fails,
		&i.Delivered,
		&i.Blocked,
	)
	return &i, err
}

const getSenderByID = `-- name: GetSenderByID :one
SELECT id, created, last_sent, email, sent, fails, delivered, blocked FROM senders WHERE id = ?
`

// GetSenderByID
//
//	SELECT id, created, last_sent, email, sent, fails, delivered, blocked FROM senders WHERE id = ?
func (q *Queries) GetSenderByID(ctx context.Context, id string) (*Sender, error) {
	row := q.queryRow(ctx, q.getSenderByIDStmt, getSenderByID, id)
	var i Sender
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.LastSent,
		&i.Email,
		&i.Sent,
		&i.Fails,
		&i.Delivered,
		&i.Blocked,
	)
	return &i, err
}

const incrementRecipientByEmail = `-- name: IncrementRecipientByEmail :exec
UPDATE recipients
SET received = received + 1
WHERE email = ?
`

// IncrementRecipientByEmail
//
//	UPDATE recipients
//	SET received = received + 1
//	WHERE email = ?
func (q *Queries) IncrementRecipientByEmail(ctx context.Context, email string) error {
	_, err := q.exec(ctx, q.incrementRecipientByEmailStmt, incrementRecipientByEmail, email)
	return err
}

const incrementRecipientByID = `-- name: IncrementRecipientByID :exec
UPDATE recipients
SET received = received + 1
WHERE id = ?
`

// IncrementRecipientByID
//
//	UPDATE recipients
//	SET received = received + 1
//	WHERE id = ?
func (q *Queries) IncrementRecipientByID(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.incrementRecipientByIDStmt, incrementRecipientByID, id)
	return err
}
